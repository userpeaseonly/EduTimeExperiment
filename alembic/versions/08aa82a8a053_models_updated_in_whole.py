"""models updated in whole

Revision ID: 08aa82a8a053
Revises: a7c6a1af28af
Create Date: 2025-06-14 17:20:21.053750

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '08aa82a8a053'
down_revision: Union[str, None] = 'a7c6a1af28af'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('heartbeats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('active_post_count', sa.Integer(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('event_state', sa.String(), nullable=False),
    sa.Column('event_description', sa.String(), nullable=False),
    sa.Column('device_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_heartbeats_date_time'), 'heartbeats', ['date_time'], unique=False)
    op.create_index(op.f('ix_heartbeats_device_id'), 'heartbeats', ['device_id'], unique=False)
    op.create_index(op.f('ix_heartbeats_id'), 'heartbeats', ['id'], unique=False)
    op.add_column('events', sa.Column('active_post_count', sa.Integer(), nullable=False))
    op.add_column('events', sa.Column('major_event', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('minor_event', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('serial_no', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('verify_no', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('person_id', sa.String(), nullable=True))
    # Create the enum type first
    person_purpose_enum = postgresql.ENUM('att', 'info', name='person_purpose_enum', create_type=False)
    person_purpose_enum.create(op.get_bind(), checkfirst=True)
    # Then add the column using the enum type
    op.add_column('events', sa.Column('person_purpose', postgresql.ENUM('att', 'info', name='person_purpose_enum', create_type=False), nullable=True))
    op.add_column('events', sa.Column('zone_type', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('swipe_card_type', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('card_no', sa.String(), nullable=True))
    op.add_column('events', sa.Column('card_type', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('user_type', sa.String(), nullable=True))
    op.add_column('events', sa.Column('current_event', sa.Boolean(), nullable=True))
    op.add_column('events', sa.Column('front_serial_no', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('pictures_number', sa.Integer(), nullable=True))
    op.add_column('events', sa.Column('mask', sa.String(), nullable=True))
    op.add_column('events', sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('events', sa.Column('created_at', sa.DateTime(timezone=True), nullable=False))
    op.alter_column('events', 'date_time',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('events', 'event_state',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('events', 'event_description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('events', 'device_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_index(op.f('ix_events_attendance_status'), 'events', ['attendance_status'], unique=False)
    op.create_index(op.f('ix_events_date_time'), 'events', ['date_time'], unique=False)
    op.create_index(op.f('ix_events_device_id'), 'events', ['device_id'], unique=False)
    op.create_index(op.f('ix_events_event_type'), 'events', ['event_type'], unique=False)
    op.create_index(op.f('ix_events_person_id'), 'events', ['person_id'], unique=False)
    op.drop_column('events', 'picture_url')
    op.drop_column('events', 'major_event_type')
    op.drop_column('events', 'employee_name')
    op.drop_column('events', 'face_rect')
    op.drop_column('events', 'sub_event_type')
    op.drop_column('events', 'employee_no')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('events', sa.Column('employee_no', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('sub_event_type', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('face_rect', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('employee_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('events', sa.Column('major_event_type', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('events', sa.Column('picture_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_events_person_id'), table_name='events')
    op.drop_index(op.f('ix_events_event_type'), table_name='events')
    op.drop_index(op.f('ix_events_device_id'), table_name='events')
    op.drop_index(op.f('ix_events_date_time'), table_name='events')
    op.drop_index(op.f('ix_events_attendance_status'), table_name='events')
    op.alter_column('events', 'device_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('events', 'event_description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('events', 'event_state',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('events', 'date_time',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('events', 'created_at')
    op.drop_column('events', 'event_metadata')
    op.drop_column('events', 'mask')
    op.drop_column('events', 'pictures_number')
    op.drop_column('events', 'front_serial_no')
    op.drop_column('events', 'current_event')
    op.drop_column('events', 'user_type')
    op.drop_column('events', 'card_type')
    op.drop_column('events', 'card_no')
    op.drop_column('events', 'swipe_card_type')
    op.drop_column('events', 'zone_type')
    op.drop_column('events', 'person_purpose')
    # Drop the enum type after dropping the column that uses it
    postgresql.ENUM(name='person_purpose_enum').drop(op.get_bind(), checkfirst=True)
    op.drop_column('events', 'person_id')
    op.drop_column('events', 'verify_no')
    op.drop_column('events', 'serial_no')
    op.drop_column('events', 'minor_event')
    op.drop_column('events', 'major_event')
    op.drop_column('events', 'active_post_count')
    op.drop_index(op.f('ix_heartbeats_id'), table_name='heartbeats')
    op.drop_index(op.f('ix_heartbeats_device_id'), table_name='heartbeats')
    op.drop_index(op.f('ix_heartbeats_date_time'), table_name='heartbeats')
    op.drop_table('heartbeats')
    # ### end Alembic commands ###
